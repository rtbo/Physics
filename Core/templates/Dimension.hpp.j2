#pragma once

#include "si/Dim.hpp"
#include "si/Unit.hpp"
#include "si/Value.hpp"

#include <ratio>
#include <ostream>

namespace si {

    using {{ dim.name }}Dim = Dim<
        base::Mass<{{ dim.M }}>,
        base::Length<{{ dim.L }}>,
        base::Time<{{ dim.T }}>,
        base::Current<{{ dim.I }}>,
        base::Temperature<{{ dim.Th }}>,
        base::Amount<{{ dim.N }}>,
        base::LightIntensity<{{ dim.J }}>
    >;

{% for alias in dim.aliases %}
    using {{ alias }}Dim = {{ dim.name }}Dim;
{% endfor %}

    using {{ dim.name }} = Value<{{ dim.name }}Dim>;

{% for alias in dim.aliases %}
    using {{ alias }} = {{ dim.name }};
{% endfor %}

{% for unit in dim.units %}
    using {{ unit.name }}_t = unit<
        {{ dim.name }}Dim,
        factor_conv<std::ratio<{{ unit.ratio_num }}{%if unit.ratio_den != 1 %}, {{ unit.ratio_den }}{% endif %}>>
    >;
{% endfor %}

    inline std::ostream &operator<<(std::ostream& out, const {{ dim.default_unit.name }}_t &val)
    {
        out << val.val() << " {{ dim.default_unit.unicode }}";
        return out;
    }

{% for unit in dim.units if not unit.is_default %}
    inline std::ostream &operator<<(std::ostream& out, const {{ unit.name }}_t &val)
    {
        out << val.val() << " {{ unit.unicode }}";
        return out;
    }

{% endfor %}
    inline std::ostream &operator<<(std::ostream& out, const {{ dim.name }} &val)
    {
        out << "{{ dim.name }}{ " << value_repr(val) << " }";
        return out;
    }

    namespace literals {

{% for unit in dim.units %}
        constexpr {{ unit.name }}_t operator"" _{{ unit.symbol }}(long double val)
        {
            return {{ unit.name }}_t { static_cast<double>(val) };
        }
        constexpr {{ unit.name }}_t operator"" _{{ unit.symbol }}(unsigned long long int val)
        {
            return {{ unit.name }}_t { static_cast<double>(val) };
        }

{% endfor %}
    }
}

