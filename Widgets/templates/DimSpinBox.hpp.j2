/*
    Copyright (C) 2013-2020 Remi Thebault
    All rights reserved.

    This program and its source code are distributed under the
    terms of the BSD-style license, that can be found in the
    License.txt file at project root.
*/

#pragma once

#include <si/{{ dim.name }}.hpp>

#include <QAbstractSpinBox>

namespace siui {

class {{ dim.name }}SpinBox : public QAbstractSpinBox
{
    Q_OBJECT

    Q_PROPERTY(DesignerUnit unit READ designerUnit WRITE setDesignerUnit)
    Q_PROPERTY(double {{ dim.snake_name }} READ designerValue WRITE setDesignerValue)
    Q_PROPERTY(double step READ designerStep WRITE setDesignerStep)
    Q_PROPERTY(double minimum READ designerMinimum WRITE setDesignerMinimum)
    Q_PROPERTY(double maximum READ designerMaximum WRITE setDesignerMaximum)
    Q_PROPERTY(QString prefix READ prefix WRITE setPrefix)
    Q_PROPERTY(int decimals READ decimals WRITE setDecimals)

public:

    enum DesignerUnit {
{% for unit in dim.units %}
        {{ unit.cppname }},
{% endfor %}
    };
    Q_ENUM(DesignerUnit)

    {{ dim.name }}SpinBox(QWidget *parent);

    virtual ~{{ dim.name }}SpinBox();

    si::{{ dim.cppns }}::Unit unit() const { return _unit; }
    si::{{ dim.name }} {{ dim.snake_name }}() const { return _{{ dim.snake_name }}; }
    si::{{ dim.name }} step() const { return _step; }
    si::{{ dim.name }} minimum() const { return _minimum; }
    si::{{ dim.name }} maximum() const { return _maximum; }
    QString prefix() const { return _prefix; }
    int decimals() const { return _decimals; }

    virtual void stepBy(int steps) override;

    virtual QSize sizeHint() const override;

    DesignerUnit designerUnit() const {
        return static_cast<DesignerUnit>(unit());
    }
    double designerValue() const;
    double designerStep() const;
    double designerMinimum() const;
    double designerMaximum() const;
    void setDesignerUnit(const DesignerUnit unit);
    void setDesignerValue(const double val);
    void setDesignerStep(const double val);
    void setDesignerMinimum(const double val);
    void setDesignerMaximum(const double val);

public slots:

    void setUnit(const si::{{ dim.cppns }}::Unit unit);
    void set{{ dim.name }}(const si::{{ dim.name }} {{ dim.snake_name }});
    void setStep(const si::{{ dim.name }} step);
    void setMinimum(const si::{{ dim.name }} minimum);
    void setMaximum(const si::{{ dim.name }} maximum);
    void setPrefix(const QString &prefix);
    void setDecimals(const int decimals);

private slots:

    void setValueFromText();
    void handleCustomMenu(const QPoint& globalPos);

signals:

    void {{ dim.snake_name }}Changed(si::{{ dim.name }} {{ dim.snake_name }});

protected:

    virtual bool eventFilter(QObject *obj, QEvent *ev) override;
    virtual StepEnabled stepEnabled() const override;

private:

    void updateText();
    void emitSignal();

    si::{{ dim.cppns }}::Unit _unit;
    si::{{ dim.name }} _{{ dim.snake_name }};
    si::{{ dim.name }} _step;
    si::{{ dim.name }} _minimum;
    si::{{ dim.name }} _maximum;
    QString _prefix;
    int _decimals = 2;

};

} // namespace siui
