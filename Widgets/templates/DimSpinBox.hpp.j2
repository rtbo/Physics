/*
    Copyright (C) 2013-2014 Remi Thebault
    All rights reserved.

    This program and its source code are distributed under the
    terms of the BSD-style license, that can be found in the
    License.txt file at project root.
*/

#pragma once

#include <si/{{ dim.name }}.hpp>

#include <QDoubleSpinBox>

namespace siui {

class {{ dim.name }}SpinBox : public QDoubleSpinBox
{
    Q_OBJECT

    Q_PROPERTY({{ dim.name }}Unit unit READ unit WRITE setUnit)
    Q_ENUMS({{ dim.name }}Unit)

public:

    enum {{ dim.name }}Unit {
{% for unit in dim.units %}
        {{ unit.name }},
{% endfor %}
    };

    {{ dim.name }}SpinBox(QWidget *parent);

    virtual ~{{ dim.name }}SpinBox();

    si::{{ dim.name }} {{ dim.snake_name }}() const;

    {{ dim.name }}Unit unit() const {
        return unit_;
    }

    // FIXME: actual values of spinbox depends on order of property setting
    // Designer sets mini and maxi before the unit,
    // setting the unit affects the spinbox mini maxi
    // adding trackBounds with false default to fix it.
    // is this the correct interface?
    void setUnit({{ dim.name }}Unit unit, bool trackBounds=false);

    si::{{ dim.name }} step() const;
    void setStep(si::{{ dim.name }} val);

    si::{{ dim.name }} mini() const;
    void setMini(si::{{ dim.name }} val);

    si::{{ dim.name }} maxi() const;
    void setMaxi(si::{{ dim.name }} val);

public slots:

    void set{{ dim.name }}(si::{{ dim.name }} {{ dim.snake_name }});

signals:

    void {{ dim.snake_name }}Changed(si::{{ dim.name }} {{ dim.snake_name }});

private slots:

    void handleValueChange(double value);
    void handleCustomMenu(const QPoint& globalPos);

    void updateSuffix();

protected:

    virtual bool eventFilter(QObject *obj, QEvent *ev) override;

private:

    {{ dim.name }}Unit unit_;

    bool changeUnitFlag_;
};

} // namespace siui
