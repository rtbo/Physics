/*
    Copyright (C) 2013, 2014, 2017 Remi Thebault
    All rights reserved.

    This program and its source code are distributed under the
    terms of the BSD-style license, that can be found in the
    License.txt file at project root.
*/

{% for dim in dims %}
#include "siui/{{ dim.name }}SpinBox.hpp"
{% endfor %}

#include <QContextMenuEvent>
#include <QLineEdit>
#include <QLocale>
#include <QMenu>
#include <QMetaType>

#include <cassert>
#include <iostream>

namespace siui {

{% for dim in dims %}
static int _{{ dim.snake_name }} = qRegisterMetaType<si::{{ dim.name }}>("si::{{ dim.name }}");
{% endfor %}

namespace {
    class AutoSelectLineEdit : public QLineEdit
    {
    public:
        AutoSelectLineEdit(QWidget *parent) : QLineEdit{ parent } {}
        virtual ~AutoSelectLineEdit() {}

    protected:
        virtual void focusInEvent(QFocusEvent *ev) override
        {
            QLineEdit::focusInEvent(ev);
            _focus = true;
        }

        // mouse press event triggers just after focusIn.
        // default impl will deselect the text, so we need to select
        // all after QLineEdit::mousePressEvent (but only after focusIn)
        virtual void mousePressEvent(QMouseEvent *ev) override
        {
            QLineEdit::mousePressEvent(ev);
            if (_focus) {
                selectAll();
                _focus = false;
            }
        }

    private:
        bool _focus = false;
    };
} // namespace


{% for dim in dims %}

{{ dim.name }}SpinBox::{{ dim.name }}SpinBox(QWidget *parent) :
    QAbstractSpinBox{ parent },
    _unit{ si::{{ dim.cppns }}::Unit::{{ dim.default_unit.cppname }} },
    _{{ dim.snake_name }}{ si::{{ dim.default_unit.name }}_t{ 0.0 } },
    _step{ si::{{ dim.default_unit.name }}_t{ 1.0 } },
    _minimum{ si::{{ dim.default_unit.name }}_t{ 0.0 } },
    _maximum{ si::{{ dim.default_unit.name }}_t{ 100.0 } }
{
    auto *lineEdit = new AutoSelectLineEdit{ this };
    setLineEdit(lineEdit);

    installEventFilter(this);

    QObject::connect(lineEdit, &QLineEdit::editingFinished,
                     this, &{{ dim.name }}SpinBox::setValueFromText);
    QObject::connect(lineEdit, &QLineEdit::returnPressed,
                     this, &{{ dim.name }}SpinBox::setValueFromText);

    updateText();
}

{{ dim.name }}SpinBox::~{{ dim.name }}SpinBox()
{}

void {{ dim.name }}SpinBox::stepBy(int steps)
{
    QAbstractSpinBox::stepBy(steps);
    if (wrapping()) {
        if (_{{ dim.snake_name }} == _minimum && steps < 0) {
            set{{ dim.name }}(_maximum);
            return;
        }
        if (_{{ dim.snake_name }} == _maximum && steps > 0) {
            set{{ dim.name }}(_minimum);
            return;
        }
    }
{% if dim.name == 'Coefficient' %}
    set{{ dim.name }}(_{{ dim.snake_name }} + si::Coefficient{ steps * static_cast<double>(_step) });
{% else %}
    set{{ dim.name }}(_{{ dim.snake_name }} + steps * _step);
{% endif %}
}

QSize {{ dim.name }}SpinBox::sizeHint() const
{
    return QSize{ 81, 20 };
}

double {{ dim.name }}SpinBox::designerValue() const
{
    return si::{{ dim.cppns }}::value_to(_unit, _{{ dim.snake_name }});
}

double {{ dim.name }}SpinBox::designerStep() const
{
    return si::{{ dim.cppns }}::value_to(_unit, _step);
}

double {{ dim.name }}SpinBox::designerMinimum() const
{
    return si::{{ dim.cppns }}::value_to(_unit, _minimum);
}

double {{ dim.name }}SpinBox::designerMaximum() const
{
    return si::{{ dim.cppns }}::value_to(_unit, _maximum);
}

void {{ dim.name }}SpinBox::setDesignerUnit(const DesignerUnit unit)
{
    const auto u = static_cast<si::{{ dim.cppns }}::Unit>(unit);
    const auto v = designerValue();
    const auto s = designerStep();
    const auto mi = designerMinimum();
    const auto ma = designerMaximum();
    _unit = u;
    _{{ dim.snake_name }} = si::{{ dim.cppns }}::value_from(_unit, v);
    _step = si::{{ dim.cppns }}::value_from(_unit, s);
    _minimum = si::{{ dim.cppns }}::value_from(_unit, mi);
    _maximum = si::{{ dim.cppns }}::value_from(_unit, ma);
    updateText();
}

void {{ dim.name }}SpinBox::setDesignerValue(const double val)
{
    set{{ dim.name }}(si::{{ dim.cppns }}::value_from(_unit, val));
}

void {{ dim.name }}SpinBox::setDesignerStep(const double val)
{
    setStep(si::{{ dim.cppns }}::value_from(_unit, val));
}

void {{ dim.name }}SpinBox::setDesignerMinimum(const double val)
{
    setMinimum(si::{{ dim.cppns }}::value_from(_unit, val));
}

void {{ dim.name }}SpinBox::setDesignerMaximum(const double val)
{
    setMaximum(si::{{ dim.cppns }}::value_from(_unit, val));
}

void {{ dim.name }}SpinBox::setUnit(const si::{{ dim.cppns }}::Unit unit)
{
    _unit = unit;
    updateText();
}

void {{ dim.name }}SpinBox::set{{ dim.name }}(const si::{{ dim.name }} {{ dim.snake_name }})
{
    si::{{ dim.name }} v = {{ dim.snake_name }};
    if (v > _maximum)
        v = _maximum;
    else if (v < _minimum)
        v = _minimum;
    if (_{{ dim.snake_name }} == v)
        return;
    _{{ dim.snake_name }} = v;
    updateText();
    emitSignal();
}

void {{ dim.name }}SpinBox::setStep(const si::{{ dim.name }} step)
{
    _step = step;
}

void {{ dim.name }}SpinBox::setMinimum(const si::{{ dim.name }} minimum)
{
    if (minimum == _minimum)
        return;
    _minimum = (minimum >= _maximum) ? _maximum : minimum;
    if (_{{ dim.snake_name }} < _minimum) {
        set{{ dim.name }}(_minimum);
    }
}

void {{ dim.name }}SpinBox::setMaximum(const si::{{ dim.name }} maximum)
{
    if (maximum == _maximum)
        return;
    _maximum = (maximum <= _minimum) ? _minimum : maximum;
    if (_{{ dim.snake_name }} > _maximum) {
        set{{ dim.name }}(_maximum);
    }
}

void {{ dim.name }}SpinBox::setPrefix(const QString &prefix)
{
    _prefix = prefix;
    updateText();
}

void {{ dim.name }}SpinBox::setDecimals(const int decimals)
{
    _decimals = decimals;
    updateText();
}

void {{ dim.name }}SpinBox::setValueFromText()
{
    QString t = lineEdit()->text();
    if (t.startsWith(_prefix)) {
        t = t.right(t.size() - _prefix.size());
    }
    const auto strView = si::{{ dim.cppns }}::u16::str_view(_unit);
    const auto unit = QString::fromUtf16(strView.data(), static_cast<int>(strView.size()));
    if (t.endsWith(unit)) {
        t = t.left(t.size() - unit.size());
    }
    t = t.trimmed();
    bool ok = false;
    double val = QLocale{}.toDouble(t, &ok);
    if (!ok) {
        val = QLocale::c().toDouble(t, &ok);
    }
    if (ok) {
        const auto pval = si::{{ dim.cppns }}::value_from(_unit, val);
        if (pval == _{{ dim.snake_name }})
            updateText();
        else
            set{{ dim.name }}(pval);
        lineEdit()->setStyleSheet("");
    }
    else {
        lineEdit()->setStyleSheet("color: red");
    }
}

void {{ dim.name }}SpinBox::handleCustomMenu(const QPoint &globalPos)
{
    QMenu menu;

    for (const auto u : si::{{ dim.cppns }}::u16::all_units) {
        const QString s = QString::fromUtf16(u.data(), static_cast<int>(u.size()));
        menu.addAction(s);
    }

    QAction *a = menu.exec(globalPos);
    if (a) {
        for (const auto u : si::{{ dim.cppns }}::all_units) {
            const auto strView = si::{{ dim.cppns }}::u16::str_view(u);
            if (a->text() == QString::fromUtf16(strView.data(), static_cast<int>(strView.size()))) {
                setUnit(u);
                return;
            }
        }
    }
}

bool {{ dim.name }}SpinBox::eventFilter(QObject *obj, QEvent *event)
{
    if (obj == this) {
        if (event->type() == QEvent::ContextMenu) {
            QContextMenuEvent *mEv = static_cast<QContextMenuEvent*>(event);
            if (mEv->modifiers() & Qt::ControlModifier) {
                handleCustomMenu(mEv->globalPos());
                return true;
            }
        }
        return false;
    }
    else {
        return QAbstractSpinBox::eventFilter(obj, event);
    }
}

QAbstractSpinBox::StepEnabled {{ dim.name }}SpinBox::stepEnabled() const
{
    if (wrapping())
        return QAbstractSpinBox::StepUpEnabled | QAbstractSpinBox::StepDownEnabled;

    QAbstractSpinBox::StepEnabled res = QAbstractSpinBox::StepNone;
    if (_{{ dim.snake_name }} > _minimum) {
        res |= QAbstractSpinBox::StepDownEnabled;
    }
    if (_{{ dim.snake_name }} < _maximum) {
        res |= QAbstractSpinBox::StepUpEnabled;
    }
    return res;
}

void {{ dim.name }}SpinBox::updateText()
{
    const auto v = si::{{ dim.cppns }}::value_to(_unit, _{{ dim.snake_name }});
    const auto vs = QLocale{}.toString(v, 'f', _decimals);
    const auto strView = si::{{ dim.cppns }}::u16::str_view(_unit);
    const auto us = QString::fromUtf16(strView.data(), static_cast<int>(strView.size()));
    lineEdit()->setText(QString{ "%1%2 %3" }.arg(_prefix).arg(vs).arg(us));
    lineEdit()->setStyleSheet("");
}

void {{ dim.name }}SpinBox::emitSignal()
{
    emit {{ dim.snake_name }}Changed(_{{ dim.snake_name }});
}

{% endfor %}

} // namespace siui
