/*
    Copyright (C) 2013-2019 Remi Thebault
    All rights reserved.

    This program and its source code are distributed under the
    terms of the BSD-style license, that can be found in the
    License.txt file at project root.
*/
{% for dim in dims %}
#include "siui/{{ dim.name }}Label.hpp"
{% endfor %}

#include <QMenu>
#include <QMetaType>
#include <QContextMenuEvent>
#include <QLocale>

#include <cassert>
#include <cmath>

namespace siui {

{% for dim in dims %}

{{ dim.name }}Label::{{ dim.name }}Label(QWidget *parent) :
    QLabel{ parent },
    _unit{ si::{{ dim.cppns }}::Unit::{{ dim.default_unit.cppname }} }
{
    updateText();
    installEventFilter(this);
}

{{ dim.name }}Label::~{{ dim.name }}Label()
{}

void {{ dim.name }}Label::setDesignerUnit(const DesignerUnit unit)
{
    const auto u = static_cast<si::{{ dim.cppns }}::Unit>(unit);
    const auto v = designerValue();
    _unit = u;
    _{{ dim.snake_name }} = si::{{ dim.cppns }}::value_from(_unit, v);
    updateText();
}

double {{ dim.name }}Label::designerValue() const
{
    return si::{{ dim.cppns }}::value_to(_unit, _{{ dim.snake_name }});
}

void {{ dim.name }}Label::setDesignerValue(const double value)
{
    set{{ dim.name }}(si::{{ dim.cppns }}::value_from(_unit, value));
}

void {{ dim.name }}Label::set{{ dim.name }}(const si::{{ dim.name }} {{ dim.snake_name }})
{
    if (_{{ dim.snake_name }} == {{ dim.snake_name }}) return;

    _{{ dim.snake_name }} = {{ dim.snake_name }};
    updateText();
    emit {{ dim.snake_name }}Changed(_{{ dim.snake_name }});
}

void {{ dim.name }}Label::setUnit(const si::{{ dim.cppns }}::Unit unit)
{
    if (_unit == unit) return;

    _unit = unit;
    updateText();
}

void {{ dim.name }}Label::setDecimals(const int decimals)
{
     if (_decimals == decimals) return;

     _decimals = decimals;
     updateText();
}

void {{ dim.name }}Label::setPrefix(const QString &prefix)
{
     if (_prefix == prefix) return;

     _prefix = prefix;
     updateText();
}

void {{ dim.name }}Label::updateText()
{
    QLocale loc;
    const auto v = si::{{ dim.cppns }}::value_to(_unit, _{{ dim.snake_name }});
    const auto vs = loc.toString(v, 'g', _decimals);
    const auto strView = si::{{ dim.cppns }}::u16::str_view(_unit);
    const auto us = QString::fromUtf16(strView.data(), static_cast<int>(strView.size()));
    setText(QString{ "%1%2 %3" }.arg(_prefix).arg(vs).arg(us));
}

void {{ dim.name }}Label::handleCustomMenu(const QPoint &globalPos)
{
    QMenu menu;

    for (const auto u : si::{{ dim.cppns }}::u16::all_units) {
        const QString s = QString::fromUtf16(u.data(), static_cast<int>(u.size()));
        menu.addAction(s);
    }

    QAction *a = menu.exec(globalPos);
    if (a) {
        for (const auto u : si::{{ dim.cppns }}::all_units) {
            const auto strView = si::{{ dim.cppns }}::u16::str_view(u);
            if (a->text() == QString::fromUtf16(strView.data(), static_cast<int>(strView.size()))) {
                setUnit(u);
                return;
            }
        }
    }
}

bool {{ dim.name }}Label::eventFilter(QObject *obj, QEvent *event)
{
    if (obj == this) {
        if (event->type() == QEvent::ContextMenu) {
            QContextMenuEvent *mEv = static_cast<QContextMenuEvent*>(event);
            if (mEv->modifiers() & Qt::ControlModifier) {
                handleCustomMenu(mEv->globalPos());
                return true;
            }
        }
        return false;
    }
    else {
        return QLabel::eventFilter(obj, event);
    }
}

{% endfor %}

} // namespace siui
