/*
    Copyright (C) 2013-2019 Remi Thebault
    All rights reserved.

    This program and its source code are distributed under the
    terms of the BSD-style license, that can be found in the
    License.txt file at project root.
*/
{% for dim in dims %}
#include "siui/{{ dim.name }}Label.hpp"
{% endfor %}

#include <QMenu>
#include <QMetaType>
#include <QContextMenuEvent>
#include <QLocale>

#include <cassert>
#include <cmath>

namespace siui {

{% for dim in dims %}

{% for unit in dim.units %}
inline QString {{ unit.name }}str()
{
    const auto view = si::{{ dim.name | lower }}::u16::{{ unit.symbol }};
    return QString::fromUtf16(
        view.data(), static_cast<int>(view.length())
    );
}
{% endfor %}

inline QString {{ dim.snake_name }}UnitToString({{ dim.name }}Label::{{ dim.name }}Unit unit)
{
    switch (unit) {
{% for unit in dim.units %}
    case {{ dim.name }}Label::{{ unit.cppname }}:
        return {{ unit.name }}str();
{% endfor %}
    }

    assert(!"the passed unit is wrong");
    return "";
}

inline {{ dim.name }}Label::{{ dim.name }}Unit {{ dim.snake_name }}UnitFromString(QString s)
{
{% for unit in dim.units %}
    if (s == {{ unit.name }}str()) return {{ dim.name }}Label::{{ unit.cppname }};
{% endfor %}

    assert(!"the passed string is wrong");
    return {{ dim.name }}Label::{{ dim.default_unit.cppname }};
}

inline double {{ dim.snake_name }}UnitValue(si::{{ dim.name }} value, {{ dim.name }}Label::{{ dim.name }}Unit unit)
{
    return si::{{ dim.name | lower }}::value_to(static_cast<si::{{ dim.name | lower }}::Unit>(unit), value);
}

inline si::{{ dim.name }} unit{{ dim.name }}(double value, {{ dim.name }}Label::{{ dim.name }}Unit unit)
{
    return si::{{ dim.name | lower }}::value_from(static_cast<si::{{ dim.name | lower }}::Unit>(unit), value);
}

{{ dim.name }}Label::{{ dim.name }}Label(QWidget *parent) :
    QLabel{ parent },
    unit_({{ dim.default_unit.cppname }}),
    precision_(2)
{
    updateValue();

    installEventFilter(this);
}

{{ dim.name }}Label::~{{ dim.name }}Label()
{}

si::{{ dim.name }} {{ dim.name }}Label::{{ dim.snake_name }}() const
{
    return value_;
}

void {{ dim.name }}Label::set{{ dim.name }}(si::{{ dim.name }} val)
{
    if (value_ == val) return;

    value_ = val;
    updateValue();
    emit {{ dim.snake_name }}Changed(value_);
}

void {{ dim.name }}Label::updateValue()
{
    const auto val = {{ dim.snake_name }}UnitValue(value_, unit_);
    setText(QString("%1 %2").arg(QLocale().toString(val, 'f', precision_)).arg({{ dim.snake_name }}UnitToString(unit_)));
}

void {{ dim.name }}Label::setUnit({{ dim.name }}Unit unit)
{
    if (unit_ == unit) return;

    unit_ = unit;
    updateValue();
}

void {{ dim.name }}Label::setPrecision(int precision)
{
     if (precision_ == precision) return;

     precision_ = precision;
     updateValue();
}

void {{ dim.name }}Label::handleCustomMenu(const QPoint &globalPos)
{
    QMenu menu;

{% for unit in dim.units %}
    menu.addAction({{ dim.snake_name }}UnitToString({{ unit.cppname }}));
{% endfor %}

    QAction *a = menu.exec(globalPos);

    if (a) {
        setUnit({{ dim.snake_name }}UnitFromString(a->text()));
    }
}

bool {{ dim.name }}Label::eventFilter(QObject *obj, QEvent *event)
{
    if (obj == this) {
        if (event->type() == QEvent::ContextMenu) {
            QContextMenuEvent *mEv = static_cast<QContextMenuEvent*>(event);
            if (mEv->modifiers() & Qt::ControlModifier) {
                handleCustomMenu(mEv->globalPos());
                return true;
            }
        }
        return false;
    }
    else {
        return QLabel::eventFilter(obj, event);
    }
}

{% endfor %}

} // namespace siui
