/*
    Copyright (C) 2013-2019 Remi Thebault
    All rights reserved.

    This program and its source code are distributed under the
    terms of the BSD-style license, that can be found in the
    License.txt file at project root.
*/

#pragma once

#include <si/{{ dim.name }}.hpp>

#include <QLabel>

namespace siui {

class {{ dim.name }}Label : public QLabel
{
    Q_OBJECT

    Q_PROPERTY(DesignerUnit unit READ designerUnit WRITE setDesignerUnit)
    Q_PROPERTY(double {{ dim.snake_name }} READ designerValue WRITE setDesignerValue)
    Q_PROPERTY(int decimals READ decimals WRITE setDecimals)
    Q_PROPERTY(QString prefix READ prefix WRITE setPrefix)

public:

    enum DesignerUnit {
{% for unit in dim.units %}
        {{ unit.cppname }},
{% endfor %}
    };
    Q_ENUM(DesignerUnit)

    {{ dim.name }}Label(QWidget *parent);

    virtual ~{{ dim.name }}Label();

    si::{{ dim.cppns }}::Unit unit() const { return _unit; }
    si::{{ dim.name }} {{ dim.snake_name }}() const { return _{{ dim.snake_name }}; }
    int decimals() const { return _decimals; }
    QString prefix() const { return _prefix; }


    DesignerUnit designerUnit() const { return static_cast<DesignerUnit>(unit()); }
    void setDesignerUnit(const DesignerUnit unit);
    double designerValue() const;
    void setDesignerValue(const double value);


public slots:

    void setUnit(const si::{{ dim.cppns }}::Unit unit);
    void set{{ dim.name }}(const si::{{ dim.name }} {{ dim.snake_name }});
    void setDecimals(const int decimals);
    void setPrefix(const QString &prefix);

signals:

    void {{ dim.snake_name }}Changed(const si::{{ dim.name }} value);

private slots:

    void updateText();
    void handleCustomMenu(const QPoint& globalPos);

protected:

    virtual bool eventFilter(QObject *obj, QEvent *ev) override;

private:

    si::{{ dim.name }} _{{ dim.snake_name }};
    si::{{ dim.cppns }}::Unit _unit;
    int _decimals = 2;
    QString _prefix;
};

} // namespace siui
