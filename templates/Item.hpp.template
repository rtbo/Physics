/*
    Copyright (C) 2013-2014 Remi Thebault
    All rights reserved.

    This program and its source code are distributed under the
    terms of the BSD-style license, that can be found in the
    License.txt file at project root.
*/

#ifndef PHYSICS_{{item.name|upper}}_HPP
#define PHYSICS_{{item.name|upper}}_HPP

#include "Config.hpp"
#include "Zero.hpp"

namespace ph {

    class {{item.titleName}} {
        double {{item.defaultUnit}}_;

        explicit PHYSICS_INCLASS_CONSTEXPR {{item.titleName}}(double {{item.defaultUnit}}) : {{item.defaultUnit}}_({{item.defaultUnit}}) {}

    public:

        PHYSICS_INCLASS_CONSTEXPR {{item.titleName}}() :
            {{item.defaultUnit}}_(0.0)
        {}

        PHYSICS_INCLASS_CONSTEXPR {{item.titleName}}(const {{item.titleName}}& other) :
            {{item.defaultUnit}}_(other.{{item.defaultUnit}}_)
        {}

        PHYSICS_INCLASS_CONSTEXPR {{item.titleName}}(const zero_t&) :
            {{item.defaultUnit}}_(0.0)
        {}

        {{item.titleName}}& operator=(const {{item.titleName}}& other) {
            {{item.defaultUnit}}_ = other.{{item.defaultUnit}}();
            return *this;
        }

        {{item.titleName}}& operator=(const zero_t&) {
            {{item.defaultUnit}}_ = 0.0;
            return *this;
        }


{%for unit in item.units%}
        static PHYSICS_INCLASS_CONSTEXPR {{item.titleName}} from{{unit.titleName}}(double {{unit.name}}) {
            return {{item.titleName}}(
                {%if unit.offsetToDefault%}({%endif%}
                {{unit.name}}
                {%if unit.offsetToDefault%}+{{unit.offsetToDefault}}){%endif%}
                {%if unit.factorToDefault%}*{{unit.factorToDefault}}{%endif%}
            );
        }

{%endfor%}


{%for unit in item.units%}
        PHYSICS_INCLASS_CONSTEXPR double {{unit.name}}() const {
            return
                {%if unit.factorToDefault%}({%endif%}
                {{item.defaultUnit}}_
                {%if unit.factorToDefault%}/{{unit.factorToDefault}}){%endif%}
                {%if unit.offsetToDefault%}-{{unit.offsetToDefault}}{%endif%}
            ;
        }

{%endfor%}



        {{item.titleName}}& operator+=({{item.titleName}} rhs) {
            {{item.defaultUnit}}_ += rhs.{{item.defaultUnit}}();
            return *this;
        }

        {{item.titleName}}& operator-=({{item.titleName}} rhs) {
            {{item.defaultUnit}}_ -= rhs.{{item.defaultUnit}}();
            return *this;
        }

        {{item.titleName}}& operator*=(double rhs) {
            {{item.defaultUnit}}_ *= rhs;
            return *this;
        }

        {{item.titleName}}& operator/=(double rhs) {
            {{item.defaultUnit}}_ /= rhs;
            return *this;
        }

    };



    PHYSICS_CONSTEXPR {{item.titleName}} operator+({{item.titleName}} lhs, {{item.titleName}} rhs)
    {
        return {{item.titleName}}::from{{item.titleDefaultUnit}}(lhs.{{item.defaultUnit}}() + rhs.{{item.defaultUnit}}());
    }

    PHYSICS_CONSTEXPR {{item.titleName}} operator-({{item.titleName}} lhs, {{item.titleName}} rhs)
    {
        return {{item.titleName}}::from{{item.titleDefaultUnit}}(lhs.{{item.defaultUnit}}() - rhs.{{item.defaultUnit}}());
    }

    PHYSICS_CONSTEXPR {{item.titleName}} operator-({{item.titleName}} p)
    {
        return {{item.titleName}}::from{{item.titleDefaultUnit}}(-p.{{item.defaultUnit}}());
    }

    PHYSICS_CONSTEXPR {{item.titleName}} operator*({{item.titleName}} lhs, double rhs)
    {
        return {{item.titleName}}::from{{item.titleDefaultUnit}}(lhs.{{item.defaultUnit}}() * rhs);
    }

    PHYSICS_CONSTEXPR {{item.titleName}} operator*(double lhs, {{item.titleName}} rhs)
    {
        return rhs * lhs;
    }

    PHYSICS_CONSTEXPR {{item.titleName}} operator/({{item.titleName}} lhs, double rhs)
    {
        return {{item.titleName}}::from{{item.titleDefaultUnit}}(lhs.{{item.defaultUnit}}() / rhs);
    }

    PHYSICS_CONSTEXPR double operator/({{item.titleName}} lhs, {{item.titleName}} rhs)
    {
        return lhs.{{item.defaultUnit}}() / rhs.{{item.defaultUnit}}();
    }


    PHYSICS_CONSTEXPR bool operator==({{item.titleName}} lhs, {{item.titleName}} rhs)
    {
        return lhs.{{item.defaultUnit}}() == rhs.{{item.defaultUnit}}();
    }

    PHYSICS_CONSTEXPR bool operator<({{item.titleName}} lhs, {{item.titleName}} rhs)
    {
        return lhs.{{item.defaultUnit}}() < rhs.{{item.defaultUnit}}();
    }


    PHYSICS_CONSTEXPR bool operator==({{item.titleName}} lhs, zero_t)
    {
        return lhs.{{item.defaultUnit}}() == 0.0;
    }

    PHYSICS_CONSTEXPR bool operator==(zero_t, {{item.titleName}} rhs)
    {
        return rhs.{{item.defaultUnit}}() == 0.0;
    }


    PHYSICS_CONSTEXPR bool operator!=({{item.titleName}} lhs, zero_t)
    {
        return lhs.{{item.defaultUnit}}() != 0.0;
    }

    PHYSICS_CONSTEXPR bool operator!=(zero_t, {{item.titleName}} rhs)
    {
        return rhs.{{item.defaultUnit}}() != 0.0;
    }


    PHYSICS_CONSTEXPR bool operator<({{item.titleName}} lhs, zero_t)
    {
        return lhs.{{item.defaultUnit}}() < 0.0;
    }

    PHYSICS_CONSTEXPR bool operator<(zero_t, {{item.titleName}} rhs)
    {
        return 0.0 < rhs.{{item.defaultUnit}}();
    }


    PHYSICS_CONSTEXPR bool operator>({{item.titleName}} lhs, zero_t)
    {
        return lhs.{{item.defaultUnit}}() > 0.0;
    }

    PHYSICS_CONSTEXPR bool operator>(zero_t, {{item.titleName}} rhs)
    {
        return 0.0 > rhs.{{item.defaultUnit}}();
    }


    PHYSICS_CONSTEXPR bool operator<=({{item.titleName}} lhs, zero_t)
    {
        return lhs.{{item.defaultUnit}}() <= 0.0;
    }

    PHYSICS_CONSTEXPR bool operator<=(zero_t, {{item.titleName}} rhs)
    {
        return 0.0 <= rhs.{{item.defaultUnit}}();
    }


    PHYSICS_CONSTEXPR bool operator>=({{item.titleName}} lhs, zero_t)
    {
        return lhs.{{item.defaultUnit}}() >= 0.0;
    }

    PHYSICS_CONSTEXPR bool operator>=(zero_t, {{item.titleName}} rhs)
    {
        return 0.0 >= rhs.{{item.defaultUnit}}();
    }

}

#endif // PHYSICS_{{item.name|upper}}_HPP
